define(["require","exports","chip8/timers"],function(n,t,i){var r=i,u;(function(n){(function(){describe("A timers object",function(){var n;beforeEach(function(){n=new r.chip8.Timers}),it("should raise an event when setting the value",function(){var t=jasmine.createSpy("callback");n.onWrite.subscribe(t),n.delay=10,n.sound=41,expect(t).toHaveBeenCalledWith("delay",10),expect(t).toHaveBeenCalledWith("sound",41)}),it("should count down the timers when ticked",function(){n.delay=10,n.sound=3;var t=jasmine.createSpy("callback");n.onWrite.subscribe(t),n.tick(),expect(n.delay).toBe(9),expect(t).toHaveBeenCalledWith("sound",2)}),it("should not count down when at 0",function(){var t=jasmine.createSpy("callback");n.onWrite.subscribe(t),n.tick(),expect(t).not.toHaveBeenCalled()}),it("should raise an event when turning the sound on",function(){var t=jasmine.createSpy("callback");n.onStartSound.subscribe(t),n.sound=10,expect(t).toHaveBeenCalled()}),it("should not raise an event when the sound is already on",function(){var t=jasmine.createSpy("callback");n.sound=4,n.onStartSound.subscribe(t),n.sound=10,expect(t).not.toHaveBeenCalled()}),it("should raise an event when turning the sound off",function(){var t=jasmine.createSpy("callback");n.sound=1,n.onStopSound.subscribe(t),n.tick(),expect(t).toHaveBeenCalled()}),it("should not raise an event when the sound is already off",function(){var t=jasmine.createSpy("callback");n.sound=0,n.onStopSound.subscribe(t),n.sound=0,expect(t).not.toHaveBeenCalled()}),it("should be able to reset both timers",function(){var t=jasmine.createSpy("writeCallback"),i=jasmine.createSpy("eventCallback");n.sound=10,n.delay=129,n.onStopSound.subscribe(i),n.onWrite.subscribe(t),n.reset(),expect(i).toHaveBeenCalled(),expect(t).toHaveBeenCalledWith("delay",0),expect(t).toHaveBeenCalledWith("sound",0)})})})(n.spec||(n.spec={}));var t=n.spec})(t.chip8||(t.chip8={})),u=t.chip8})