define(["require","exports","chip8/memory"],function(n,t,i){var u=i,r=u.chip8.Memory,f;(function(n){(function(){describe("A memory object",function(){it("should be initialized with a specified size",function(){var n=new r(32);expect(n.Size).toBe(32)}),it("should have a default size of 4096",function(){var n=new r;expect(n.Size).toBe(4096)}),it("should store and retrieve a value",function(){var n=new r(32);n.write(0,1337),expect(n.read(0)).toBe(1337)}),it("should initialize storage to zero",function(){for(var t=new r(10),n=0;n<10;n++)expect(t.read(n)).toBe(0)}),it("should throw an exception if reading outside of bounds",function(){var n=new r(32);expect(function(){n.read(-1)}).toThrow("Address (-1) was out of bounds"),expect(function(){n.read(32)}).toThrow("Address (32) was out of bounds")}),it("should throw an exception if writing outside of bounds",function(){var n=new r(32);expect(function(){n.write(-1,1)}).toThrow("Address (-1) was out of bounds"),expect(function(){n.write(32,1)}).toThrow("Address (32) was out of bounds")}),describe("When writing",function(){it("should raise an event",function(){var n=new r(32),t=jasmine.createSpy("callback");n.onWrite.subscribe(t),n.write(10,200),expect(t).toHaveBeenCalled()})}),describe("When bulk loading",function(){var n;beforeEach(function(){n=new r(32)}),it("should load values starting at the correct address",function(){n.load(10,[1,2,3,4,5,6,7,8,9,10],5);for(var t=10;t<15;t++)expect(n.read(t)).toBe(t-9);expect(n.read(15)).toBe(0)}),it("should throw an exception for an invalid start address",function(){expect(function(){n.load(-1,[1,2,3,4],4)}).toThrow("Address (-1) was out of bounds"),expect(function(){n.load(32,[1,2,3,4],4)}).toThrow("Address (32) was out of bounds")}),it("should throw an exception when data would overflow",function(){expect(function(){n.load(0,[1,2,3,4],64)}).toThrow("Data (64) would overflow memory(32)")}),it("should copy entire array if size is less than zero",function(){n.load(0,[1,2,3,4],-1);for(var t=0;t<4;t++)expect(n.read(t)).toBe(t+1)})})})})(n.spec||(n.spec={}));var t=n.spec})(t.chip8||(t.chip8={})),f=t.chip8})