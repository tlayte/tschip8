define(["require","exports","chip8/stack"],function(n,t,i){var u=i,r=u.chip8,f;(function(n){(function(){describe("A stack",function(){it("should have a default size of 16",function(){var n=new r.Stack;expect(n.size).toBe(16)}),it("should allow a size to be specified",function(){var n=new r.Stack(32);expect(n.size).toBe(32)}),it("should reset SP to zero",function(){var n=new r.Stack(10),t=jasmine.createSpy("callback");n.onWrite.subscribe(t),n.push(1),n.push(2),n.push(3),n.reset(),expect(n.SP).toBe(0),expect(t).toHaveBeenCalledWith(0,null)}),describe("when pushing values",function(){var n;beforeEach(function(){n=new r.Stack(5)}),it("should increase the stack pointer",function(){n.push(1),expect(n.SP).toBe(1)}),it("should throw on stack overflow",function(){n.push(1),n.push(1),n.push(1),n.push(1),n.push(1),expect(function(){n.push(1)}).toThrow("Stack overflow")}),it("should raise an event",function(){var t=jasmine.createSpy("callback");n.onWrite.subscribe(t),n.push(5),expect(t).toHaveBeenCalledWith(1,5)})}),describe("when popping values",function(){var n;beforeEach(function(){n=new r.Stack(5),n.push(1),n.push(2),n.push(3),n.push(4),n.push(5)}),it("should return values in the correct order",function(){expect(n.pop()).toBe(5),expect(n.pop()).toBe(4),expect(n.pop()).toBe(3),expect(n.pop()).toBe(2),expect(n.pop()).toBe(1)}),it("should throw on stack underflow",function(){n.pop(),n.pop(),n.pop(),n.pop(),n.pop(),expect(function(){n.pop()}).toThrow("Stack underflow")}),it("should raise an event",function(){var t=jasmine.createSpy("callback");n.onWrite.subscribe(t),n.pop(),expect(t).toHaveBeenCalledWith(4,5)})})})})(n.spec||(n.spec={}));var t=n.spec})(t.chip8||(t.chip8={})),f=t.chip8})