define(["require","exports","chip8/decoder"],function(n,t,i){var u=i,r=u.chip8,f;(function(n){(function(){describe("An instruction decoder",function(){var i,t,n;beforeEach(function(){t=jasmine.createSpyObj("memorySpy",["read","write"]),n=jasmine.createSpyObj("memorySpy",["read","write"]),Object.defineProperty(n,"PC",{set:function(n){this.write("PC",n)},get:function(){return this.read("PC")}}),i=new r.Decoder(t,n)}),it("should read the program counter",function(){i.getNext(),expect(n.read).toHaveBeenCalledWith("PC")}),it("should read both bytes of the next instruction",function(){n.read.andReturn(512),i.getNext(),expect(t.read).toHaveBeenCalledWith(512),expect(t.read).toHaveBeenCalledWith(513)}),it("should increment the program counter",function(){n.read.andReturn(512),i.getNext(),expect(n.write).toHaveBeenCalledWith("PC",514)}),describe("returns an instruction which",function(){var f=[245,101],u;beforeEach(function(){t=jasmine.createSpyObj("memorySpy",["read","write"]),t.read.andCallFake(function(n){return f[n-512]}),n=jasmine.createSpyObj("memorySpy",["read","write"]),Object.defineProperty(n,"PC",{get:function(){return 512}}),i=new r.Decoder(t,n),u=i.getNext()}),it("should have the 16bit opcode",function(){expect(u.opcode).toBe(62821)}),it("should have an array of nibbles",function(){expect(u.nibbles[0]).toBe(15),expect(u.nibbles[1]).toBe(5),expect(u.nibbles[2]).toBe(6),expect(u.nibbles[3]).toBe(5)}),it("should have an array of bytes",function(){expect(u.bytes[0]).toBe(245),expect(u.bytes[1]).toBe(101)})})})})(n.spec||(n.spec={}));var t=n.spec})(t.chip8||(t.chip8={})),f=t.chip8})